// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file RobotState.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "motoman_hardware/RobotState.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

motoman_description::msg::RobotState::RobotState()
{
    // m_state com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6580cfdd
    m_state = 0;
    // m_code com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7e0b85f9
    m_code = 0;
    // m_axs_sync_state com.eprosima.idl.parser.typecode.ArrayTypeCode@63355449
    memset(&m_axs_sync_state, 0, (8) * 1);

}

motoman_description::msg::RobotState::~RobotState()
{


}

motoman_description::msg::RobotState::RobotState(
        const RobotState& x)
{
    m_state = x.m_state;
    m_code = x.m_code;
    m_axs_sync_state = x.m_axs_sync_state;
}

motoman_description::msg::RobotState::RobotState(
        RobotState&& x)
{
    m_state = x.m_state;
    m_code = x.m_code;
    m_axs_sync_state = std::move(x.m_axs_sync_state);
}

motoman_description::msg::RobotState& motoman_description::msg::RobotState::operator =(
        const RobotState& x)
{

    m_state = x.m_state;
    m_code = x.m_code;
    m_axs_sync_state = x.m_axs_sync_state;

    return *this;
}

motoman_description::msg::RobotState& motoman_description::msg::RobotState::operator =(
        RobotState&& x)
{

    m_state = x.m_state;
    m_code = x.m_code;
    m_axs_sync_state = std::move(x.m_axs_sync_state);

    return *this;
}

bool motoman_description::msg::RobotState::operator ==(
        const RobotState& x) const
{

    return (m_state == x.m_state && m_code == x.m_code && m_axs_sync_state == x.m_axs_sync_state);
}

bool motoman_description::msg::RobotState::operator !=(
        const RobotState& x) const
{
    return !(*this == x);
}

size_t motoman_description::msg::RobotState::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += ((8) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t motoman_description::msg::RobotState::getCdrSerializedSize(
        const motoman_description::msg::RobotState& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    if ((8) > 0)
    {
        current_alignment += ((8) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }


    return current_alignment - initial_alignment;
}

void motoman_description::msg::RobotState::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_state;
    scdr << m_code;
    scdr << m_axs_sync_state;


}

void motoman_description::msg::RobotState::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_state;
    dcdr >> m_code;
    dcdr >> m_axs_sync_state;

}

/*!
 * @brief This function sets a value in member state
 * @param _state New value for member state
 */
void motoman_description::msg::RobotState::state(
        uint8_t _state)
{
    m_state = _state;
}

/*!
 * @brief This function returns the value of member state
 * @return Value of member state
 */
uint8_t motoman_description::msg::RobotState::state() const
{
    return m_state;
}

/*!
 * @brief This function returns a reference to member state
 * @return Reference to member state
 */
uint8_t& motoman_description::msg::RobotState::state()
{
    return m_state;
}

/*!
 * @brief This function sets a value in member code
 * @param _code New value for member code
 */
void motoman_description::msg::RobotState::code(
        uint8_t _code)
{
    m_code = _code;
}

/*!
 * @brief This function returns the value of member code
 * @return Value of member code
 */
uint8_t motoman_description::msg::RobotState::code() const
{
    return m_code;
}

/*!
 * @brief This function returns a reference to member code
 * @return Reference to member code
 */
uint8_t& motoman_description::msg::RobotState::code()
{
    return m_code;
}

/*!
 * @brief This function copies the value in member axs_sync_state
 * @param _axs_sync_state New value to be copied in member axs_sync_state
 */
void motoman_description::msg::RobotState::axs_sync_state(
        const std::array<uint8_t, 8>& _axs_sync_state)
{
    m_axs_sync_state = _axs_sync_state;
}

/*!
 * @brief This function moves the value in member axs_sync_state
 * @param _axs_sync_state New value to be moved in member axs_sync_state
 */
void motoman_description::msg::RobotState::axs_sync_state(
        std::array<uint8_t, 8>&& _axs_sync_state)
{
    m_axs_sync_state = std::move(_axs_sync_state);
}

/*!
 * @brief This function returns a constant reference to member axs_sync_state
 * @return Constant reference to member axs_sync_state
 */
const std::array<uint8_t, 8>& motoman_description::msg::RobotState::axs_sync_state() const
{
    return m_axs_sync_state;
}

/*!
 * @brief This function returns a reference to member axs_sync_state
 * @return Reference to member axs_sync_state
 */
std::array<uint8_t, 8>& motoman_description::msg::RobotState::axs_sync_state()
{
    return m_axs_sync_state;
}

size_t motoman_description::msg::RobotState::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool motoman_description::msg::RobotState::isKeyDefined()
{
    return false;
}

void motoman_description::msg::RobotState::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}


